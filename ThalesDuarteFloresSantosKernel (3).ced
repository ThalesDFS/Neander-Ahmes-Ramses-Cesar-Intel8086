;************************************************************************************
;
; Arquivo base para desenvolvimento do KERNEL - parte 2 do trabalho com o Cesar
;
; Versao: 2018.2.2
;
; A�reas de memoria:
;
;     0000 - 007F (0 - 127)	     _BOOT
;				     Area de Boot
;				     Aqui deve ser colocado o codigo de inicializacao
;
;     0080 - 00FF (128-255)	     _SISTEMA
;				     A�rea de interface da APP com o KERNEL
;				     Aqui � verificada qual a funcao chamada (valor no R5)
;				     e feito um desvio para o corpo da funcao correspondente
;                                    Nota: o corpo das fun��es do SISTEMA (kbhit, getchar, 
;                                          putchar, putmsg e gettime) deve ser codificado
;                                          na area do KERNEL (iniciando em _KERNEL)
;
;     0100 - 7FFF (256 a 32767)	     _APP
;				     Programa de Aplicacao (APP)
;				     Aqui sera carregado o programa para testar o KERNEL
;
;     8000 - FF7F (32768 a 65407)    _KERNEL
;				     Area para colocar a inicializacao do sistema de 
;                                    interrupcoes (_RESET), os TRATADORES DE INTERRUPCOES
;				     do TIMER e do TECLADO, as rotinas que implementam as 
;                                    funcoes do SISTEMA e a pilha (base da pilha = 65408).
;                                    Aqui tambem devem ser colocadas as rotinas e variaveis
;                                    locais usadas pelo KERNEL.
;
;     FF80 - FFBF (65408 a 65471)    _IOAREA16
;				     Area de perifericos, acessada como palavras (16 bits)
;
;     FFC0 - FFFF (65472 a 65535)    _IOAREA08
;				     Area de perifericos, acessada como bytes (8 bits)
;					
;************************************************************************************
; Definicao de constantes correspondentes aos enderecos acima descritos
;
_BOOT:		equ	0 	; (h0000) boot (desvio para _RESET)
_SISTEMA:	equ	128	; (h0080) area de inicializacao das funcoes do SISTEMA
_APP:		equ	256	; (h0100) area da aplicacao - sera carregada com programas de teste
_KERNEL:	equ	32768   ; (h8000) area de Kernel
_IOAREA16:	equ	65408	; (hFF80) area de perifericos, acessada como palavras (16 bits)
_IOAREA08:	equ	65472 	; (hFFC0) area de perifericos, acessada como bytes (8 bits)
_STACK:		equ	_IOAREA16	; base da pilha na area de kernel
;
;==============================================================================
;	Boot Startup
;	NAO ALTERAR ESSA A�REA
;==============================================================================
	org		_BOOT
	jmp		_RESET	; vetor de reset
	dw		2018		; versao = 2018.2.2
	db		2
	db		2
;	
;==============================================================================
;	Nesta area ficara o codigo que identifica qual a funcao do SISTEMA
;	que foi chamada (atraves de um JSR R7,_SISTEMA), analisando o conteudo
;	do registrador R5 e desviando para o codigo da funcao correspondente, 
;	que dever� ser codificado na area a partir do rotulo _KERNEL (adiante)
;==============================================================================
	org	_SISTEMA
	cmp #0,r5
	bne naokb
	jmp kbhit
	
	naokb:
	cmp #1,r5
	bne naoGetchar
	jmp getchar
	 
	naoGetchar:
	cmp #4,r5
	bne naoPutMsg
	jmp putmsg
	
	naoPutMsg:
	cmp #2,r5
	bne naoGetTime
	jmp gettime
	
	naoGetTime:
	cmp #3,r5
	bne naoPutChar
	jmp putchar
	naoPutChar:
	rts r7
;	
;==============================================================================
;	O programa de aplicacao sera carregado aqui (enderecos 256 a 32767)
;	NADA deve ser codificado neste espaco, que estara reservado para fazer
;	a carga parcial dos programas usados para testar o KERNEL
;==============================================================================
	org	_APP
;	
;==============================================================================
;	Area para o kernel
;    	Inicializa��o do sistema de interrupcoes (_RESET)
;	Implementacao dos tratadores de interrupcao (_ISR)
;	Implementacao das funcoes do SISTEMA
;	A pilha ocupara os enderecos mais altos desta area (abaixo de 65408)
;==============================================================================
	org	_KERNEL
;==============================================================================
;	Codigo de RESET (BOOT) do processador/interrupcao
;==============================================================================
_RESET:

clr INTE; 1 
mov #65408, R6 ; 2 
mov #_ISR, IVET	; 3
clr SEGUNDOS
clr INTS	
mov #65535,TECLA; 4
mov #0,TECST; 5) 
clr TECST

mov #250, TIMDT ;6;add
jsr r7, _S_LIMPA_VISOR_ULTRA
          
mov #131,INTE ;8) timer = 129 teclado = 130 ambos = 131
jmp _app ;Passo 9
Contador: DW 4

;==============================================================================
;	Implementacao das funcoes do SISTEMA
putmsg:
jsr r7,_S_ESCREVER_NO_VISOR
rts r7 
         
kbhit:
tst TECLA
bpl outroValor
mov #0, r0
rts r7

outroValor:
mov #1, r0
rts r7
	
gettime:
mov	SEGUNDOS,r0
rts	r7
	

getchar:
cmp #65535,TECLA
beq getchar
mov	TECLA,r0	
mov #65535,TECLA
rts r7

putchar:
MOV R1,-(R6) ;salvar1
ADD #65500,R1 ;transforma r1
mov r0,(r1) ;move ascii para posicao do r1
inc r1 ;incrementa r1 (posicao led)
MOV (R6)+,R1      
RTS R7                ; retorna ao ponto de chamada



;==============================================================================
;

;
;==============================================================================
;	Rotinas de Tratamento das interrupcoes
;==============================================================================
; Constantes ("mascaras") para teste e alteracao dos bits de INTS na ISR
;
INTS_TIM:	equ	1     ; (0000000000000001) - testar bit 0
nINTS_TIM:	equ	HFFFE ; (1111111111111110) - zerar bit 0
INTS_TEC:	equ	2     ; (0000000000000010) - testar bit 1
nINTS_TEC:	equ	HFFFD ; (1111111111111101) - zerar bit 1
;
; vari�veis de comunica��o com as fun��es do SISTEMA
TECLA:		DW	0	
SEGUNDOS:	DW	0
;

_ISR:
	
mov r0, -(r6); R0, para armazenar os segundos
mov r1, -(r6); R1, para testar tipo de interrupção
	
mov INTS,r1 
and #INTS_TIM,r1
bne EditaTimer 	;verifica se INT é do timer...se for, pula para tratar o timer		;

teclado:
and #nINTS_TIM,INTS	 ;desligar bit do time, já que chegou até aqui
mov INTS,r1		
and #INTS_TEC,r1
beq FIM_int     ;Se não é do teclado tambem, então finaliza
jmp ISRtec		;se é do teclado, vai para tratamento do teclado
	
fim_teclado:
clr TECST 
and #nINTS_TEC,INTS		;desligar bit teclado
FIM_int:
mov (r6)+, r1
mov (r6)+, r0	;devolve a pilha que foi utilizada
rti


EditaTimer:
dec Contador	;Como o TIMDT está em 250ms (250 x 4 = 1 segundo), decremente o TIMDT até ele ser 0 (Passado 1 segundo)
bne teclado
	
mov #4, Contador ;recupera contador
inc SEGUNDOS ;passou 1 seg, então incrementamos a variavel segundo
jsr r7, gettime	;chama a get_time para armazenar os segundos em r0
jmp teclado ;finalizado aqui, vamos seguir a _ISR

ISRtec:
cmp #0, TECST		;Compara 0 com TECST, caso não seja 0, então temos uma tecla, se não, apenas finaliza a _ISR
bne temTecla
jmp fim_teclado			;Finaliza a _ISR
	
temTecla:
mov TECDT, TECLA
jmp fim_teclado




; FIM DO C�DIGO DO SISTEMA
;
; >>>>>>>>>>>> AQUI SERAO INSERIDAS AS SUB-ROTINAS DA BIBCESAR V16 <<<<<<<<<<<<
_S_LIMPA_VISOR_ULTRA:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R0         ; move end. do LED 0 do visor p/R1
          MOV #65501,R1         ; move end. do LED 1 do visor p/R1
          CLR (R0)+             ; limpa LED 00 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 01 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 02 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 03 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 04 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 05 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 06 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 07 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 08 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 09 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 10 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 11 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 12 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 13 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 14 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 15 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 16 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 17 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 18 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 19 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 20 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 21 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 22 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 23 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 24 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 25 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 26 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 27 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 28 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 29 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 30 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 31 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 32 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 33 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 34 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 35 do visor e soma 2 ao R1
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada
		  
_S_ESCREVER_NO_VISOR:
		  MOV R0,-(R6)          ; salva R0 - vai ser alterado na subrotina (V16 - 12/09/2018)
          MOV R1,-(R6)          ; salva R1 - vai ser alterado na subrotina (V16 - 12/09/2018)
          MOV R2,-(R6)          ; salva R2 para usar na subrotina (V16 - 12/09/2018)
          ADD #65500,R1         ; transforma indice do LED em endereco de E/S no visor
__VOLTA_A_ESCREVER:
          MOV -1(R0),R2         ; coloca 2 caracteres em R2, comecando em "endmensagem-1"
          AND #255,R2           ; zera byte mais significativo da palavra lida
          CMP R2,#0             ; testa se terminou mensagem (achou 1 byte com 0s binários)
          BNE __ESCREVE_NO_LED  ; se nao terminou, vai exibir caractere lido
          MOV (R6)+,R2          ; restaura valor original do R2 (V16 - 12/09/2018)
          MOV (R6)+,R1          ; restaura valor original do R1 (V16 - 12/09/2018)
          MOV (R6)+,R0          ; restaura valor original do R0 (V16 - 12/09/2018)
          RTS R7                ; retorna ao ponto de chamada

__ESCREVE_NO_LED:
          MOV R2,(R1)           ; move para o visor
          INC R0                ; aponta R0 para o proximo byte da mensagem
          INC R1                ; aponta R1 para o proximo LED no visor
          BEQ __FIM_VISOR       ; fim do visor - volta ao LED 00
          BR __VOLTA_A_ESCREVER ; volta a escrever no visor
__FIM_VISOR:
          MOV #65500,R1         ; aponta para primeiro LED
          BR __VOLTA_A_ESCREVER ; volta a escrever no visor

;
;------------------------------------------------------------------------------
;	Area reservada para os perifericos
;------------------------------------------------------------------------------
;
; Acesso em 16 bits
	org	_IOAREA16
	daw	[31]
IVET:	dw	0		; Vetor de interrupcao
;
; Acesso em 8 bits
	org	_IOAREA08
	dab	[23]
TIMDT:	db	0		; Registro de programacao do timer
INTS:	db	0		; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db	0		; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db	0		; Status do teclado
TECDT:	db	0		; Dado do teclado
VISOR:	dab	[36]		; Portas de acesso ao visor